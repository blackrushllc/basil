
// AUTOGENERATED by bcc â€” DO NOT EDIT
// Source: examples\hello.basil

use libbasilrt as rt;

#[inline(always)]
fn make_val_str(s: String) -> rt::Val { rt::Val::Str(rt::Str::from_string(s)) }

fn basil_main() -> rt::RtResult<()> {
rt::print(&make_val_str({ let mut s = "Hello World!".to_string(); s.push_str(&"\n".to_string()); s }))?;
{
    let mut i_v: i64 = 1;
    let end_: i64 = 5;
    let step_: i64 = 1;
    while if step_ >= 0 { i_v <= end_ } else { i_v >= end_ } {
        rt::print(&make_val_str({ let mut s = { let mut s = { let mut s = "This is loop number ".to_string(); s.push_str(&"	".to_string()); s }; s.push_str(&i_v.to_string()); s }; s.push_str(&"\n".to_string()); s }))?;
        i_v = i_v.saturating_add(step_);
    }
}
rt::print(&make_val_str("Goodbye!".to_string()))?;

    Ok(())
}

fn main() {
    if let Err(e) = basil_main() {
        eprintln!("{}", e);
        std::process::exit(1);
    }
}
