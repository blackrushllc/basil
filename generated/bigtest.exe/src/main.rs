
// AUTOGENERATED by bcc â€” DO NOT EDIT
// Source: examples/bigtest.basil

use libbasilrt as rt;

#[inline(always)]
fn lit_val_str(s: &'static str) -> rt::Val { rt::Val::Str(rt::Str::from_static(s)) }

fn basil_main() -> rt::RtResult<()> {
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"and_or.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("AND/OR demo"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"arrays.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"Arrays demo\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"Arrays demo\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"Arrays demo\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"41\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"43\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"LEN(xN%)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"xN%\")] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"45\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"47\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"49\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"xN%(0)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xN%\"), args: [Number(0.0)] } }, rhs: Str(\"\t\") }, rhs: Str(\", xN%(5)=\") }, rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xN%\"), args: [Number(5.0)] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"57\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"59\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"LEN(X)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"xX\")] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"xX(0)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xX\"), args: [Number(0.0)] } }, rhs: Str(\"\t\") }, rhs: Str(\", xX(3)=\") }, rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xX\"), args: [Number(3.0)] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"64\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"xS$(0,0)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xS$\"), args: [Number(0.0), Number(0.0)] } }, rhs: Str(\"\t\") }, rhs: Str(\", xS$(2,1)=\") }, rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xS$\"), args: [Number(2.0), Number(1.0)] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"LEN(xS$)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"xS$\")] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"After re-DIM, LEN(xS$)=\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"xS$\")] } }, rhs: Str(\"\t\") }, rhs: Str(\"; xS$(1,0)=\") }, rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"xS$\"), args: [Number(1.0), Number(0.0)] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"classes.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Initial description:\"), rhs: Str(\"\t\") }, rhs: MemberGet { target: Var(\"user@\"), name: \"Description$\" } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Updated description:\"), rhs: Str(\"\t\") }, rhs: MemberGet { target: Var(\"user@\"), name: \"Description$\" } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"User count:\"), rhs: Str(\"\t\") }, rhs: MemberCall { target: Var(\"user@\"), method: \"CountMyUsers%\", args: [] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"else.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"expr.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Var(\"a\")"))?;
    rt::println(&lit_val_str("Var(\"b\")"))?;
    rt::println(&lit_val_str("Var(\"A$\")"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"A% IS \"), rhs: Str(\"\t\") }, rhs: Var(\"A%\") }, rhs: Str(\"\t\") }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Var(\"B\")"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Var(\"A%\"), rhs: Number(20.0) }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Var(\"B\"), rhs: Number(20.0) }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"fib.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Call { callee: Var(\"fib\"), args: [Number(10.0)] }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"for.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"hello.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"Hello World!\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Goodbye!"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"input.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"\nHello, \"), rhs: Var(\"A$\") }, rhs: Str(\"!\") }"))?;
    rt::println(&lit_val_str("\nGoodbye!"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"objects.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Team:\"), rhs: Str(\"\t\") }, rhs: MemberCall { target: Var(\"t@\"), method: \"Info$\", args: [] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"WinPct:\"), rhs: Str(\"\t\") }, rhs: MemberCall { target: Var(\"t@\"), method: \"WinPct\", args: [] } }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Riders (\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"names$\")] } }, rhs: Str(\"\t\") }, rhs: Str(\"):\") }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"Descriptions:\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"objects_arrays.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"objects_no_use.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Team:\"), rhs: Str(\"\t\") }, rhs: MemberCall { target: Var(\"t3@\"), method: \"Info$\", args: [] } }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"WinPct:\"), rhs: Str(\"\t\") }, rhs: MemberCall { target: Var(\"t3@\"), method: \"WinPct\", args: [] } }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Str(\"Riders (\"), rhs: Str(\"\t\") }, rhs: Call { callee: Var(\"LEN\"), args: [Var(\"names2$\")] } }, rhs: Str(\"\t\") }, rhs: Str(\"):\") }"))?;
    rt::println(&lit_val_str("Descriptions:"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"strings.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Var(\"C1$\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Binary { op: Add, lhs: Binary { op: Add, lhs: Var(\"A1$\"), rhs: Str(\"\t\") }, rhs: Var(\"B1$\") }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"LEN\"), args: [Var(\"C1$\")] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"MID$\"), args: [Var(\"C1$\"), Number(3.0), Number(4.0)] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"MID$\"), args: [Var(\"C1$\"), Number(3.0)] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"LEFT$\"), args: [Var(\"C1$\"), Number(2.0)] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"RIGHT$\"), args: [Var(\"C1$\"), Number(5.0)] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"INSTR\"), args: [Var(\"C1$\"), Str(\"e\")] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"INSTR\"), args: [Var(\"C1$\"), Str(\"e\"), Number(5.0)] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Call { callee: Var(\"INSTR\"), args: [Var(\"C1$\"), Str(\"x\")] }, rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"\n--------------------\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"while.basil\"), rhs: Str(\"\n\") }"))?;
    rt::println(&lit_val_str("Binary { op: Add, lhs: Str(\"--------------------\"), rhs: Str(\"\n\") }"))?;

    Ok(())
}

fn main() {
    if let Err(e) = basil_main() {
        eprintln!("{}", e);
        std::process::exit(1);
    }
}
