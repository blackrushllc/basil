rem Big combined test of most examples (excludes my_class.basil and bad/CGI templates)

#USE BMX_RIDER, BMX_TEAM

println "";
println "";
println "";

print "";

let a = 1;
let b = 0;

if a and b then print ""; else print "";
if a or b then print ""; else print "";

if (a == 1 and b == 0) or (a + b == 2) then print ""; else print "";

if (a + 1) and (b + 3) then begin
  print "";
else
  print "";
end

if true and not false then print "";

' AND has higher precedence than OR
if true or false and false then print ""; else print "";
if (true or false) and false then print ""; else print "";

if (1-1) or (2-2) then print ""; else print "";

println "";
println "";
println "";

rem Arrays example for BASIL
rem Demonstrates DIM for string ($), integer (%), and float arrays, with up to 2 dimensions

println "";
println "";
println "";

rem --- 1D integer array (0..5 inclusive => length 6) ---
println "";
dim xN%(5);
println "";
println "", LEN(xN%);
println "";
let xN%(0) = 10;
println "";
let xN%(5) = 99;
println "";
println "", xN%(0), "", xN%(5);



rem --- 1D float array (0..3 inclusive => length 4) ---


println "";
dim xX(3);
println "";
println "", LEN(xX);
let xX(0) = 1.5;
let xX(3) = 2.5;
println "", xX(0), "", xX(3);
println "";

rem --- 2D string array (0..2 by 0..1 => 3 x 2 = 6 elements) ---
dim xS$(2,1);
let xS$(0,0) = "";
let xS$(2,1) = "";
println "", xS$(0,0), "", xS$(2,1);
println "", LEN(xS$);

rem Show that re-DIM resets the array
dim xS$(1,0); rem now capacity is 2 x 1 = 2 elements, previous contents cleared
let xS$(1,0) = "";
println "", LEN(xS$), "", xS$(1,0);

println "";
println "";
println "";

rem Demo: Using CLASS to instantiate and interact with a class instance

dim user@ as class("");

rem Access and modify a public variable
println "", user@.Description$;
let user@.Description$ = "";
println "", user@.Description$;

rem Call public functions
user@.AddUser("");
user@.AddUser("");
user@.AddUser("");

println "", user@.CountMyUsers%();

println "";
println "";
println "";

let ans$="";

if ans$ == "" then begin
  print "";
else
    print "";
end

println "";
println "";
println "";

let a = 2 + 3 * 4;
print a; // 14
let b = (2 + 3) * 4;
print b; // 20

let A$ = "";
print A$;

let A% = 10.1;
print "",A%, "";

let B = 10.1;
print B;

print A% + 20;

print B + 20;

println "";
println "";
println "";

func fib(n)
begin
if n < 2 then return n;
return fib(n - 1) + fib(n - 2);
end

print fib(10); // 55

println "";
println "";
println "";

for i = 1 to 5
    println i;
next i;

for j = 5 to 1 step -1
    begin
        print j;
        for i = 1 to 5
            println i;
        next i;
    end
next j;

println "";
println "";
println "";

rem Simple Hello World
println "";
    for I% = 1 to 5
        begin
        println "", I%;
        end
    next
print "";

println "";
println "";
println "";

// Demo of input$ and if statements.
let A$ = input$("");

print ""+A$+"";

let ans$ = UCASE$(INPUTC$(""));

// Block if:

if ans$ == "" then
    begin
      print "";
      print "";
      print "";
    else
        print "";
    end

// Immediate if:
if ans$ == "" then print ""; else print "";
print "";

println "";
println "";
println "";

rem Objects demo: BMX_RIDER and BMX_TEAM
rem This example assumes object support is compiled in with features enabling BMX_RIDER and BMX_TEAM.



rem --- Create riders ---
dim r1@ as BMX_RIDER("", 17, "", 12, 3);
dim r2@ as BMX_RIDER("", 21, "", 5, 10);
dim r3@ as BMX_RIDER("", 19, "", 30, 4);

rem Change a few properties after construction
r2@.SkillLevel$ = "";
r2@.Wins% = 8;
r2@.Losses% = 9;

rem --- Create a team (PRO flag available when BMX_TEAM is compiled) ---
dim t@ as BMX_TEAM("", 2015, PRO);

rem Set some team stats
t@.TeamWins% = 12;
t@.TeamLosses% = 3;

rem Add riders to the team
t@.AddRider(r1@);
t@.AddRider(r2@);
t@.AddRider(r3@);

rem --- Show team summary and rider list ---
println "", t@.Info$();
println "", t@.WinPct();

let names$ = t@.RiderNames$();
println "", LEN(names$), "";
for i% = 0 to LEN(names$)-1
  println "", names$(i%);
next i%

rem Also PRINTLN descriptions from the riders for variety
let descs$ = t@.RiderDescriptions$();
println "";
for i% = 0 to LEN(descs$)-1
  println "", descs$(i%);
next i%

rem --- Optionally show full object descriptors ---
rem LET ans$ = INPUT$("");
let ans$2 = ""; rem auto-answer yes for automated testing
if ans$2 == "" then
begin
  println "";
  println DESCRIBE$(r1@);
  println "";
  DESCRIBE t@;
end

println "";
println "";
println "";

rem Objects demo: BMX_RIDER and BMX_TEAM
rem This example assumes object support is compiled in with features enabling BMX_RIDER and BMX_TEAM.



dim riders@(2) as BMX_RIDER;
let riders@(0) = NEW BMX_RIDER("", 17, "", 12, 3);
let riders@(1) = NEW BMX_RIDER("",   21, "",  8, 9);
let riders@(2) = NEW BMX_RIDER("", 19, "",    30, 4);

for each r@ in riders@
  print "",r@.Describe$();
next

dim nums%(4);
for each n% in nums%
  let nums%(n%) = n% * n%;
next

dim t2@ as BMX_TEAM("", 2015, PRO);
t2@.AddRider(riders@(0)); t2@.AddRider(riders@(1)); t2@.AddRider(riders@(2));

for each name$ in t2@.RiderNames$()
  println name$;
next

for each desc$ in t2@.RiderDescriptions$()
  println desc$;
next

println "";
println "";
println "";

rem Objects demo: BMX_RIDER and BMX_TEAM
rem This example assumes object support is compiled in with features enabling BMX_RIDER and BMX_TEAM.



rem --- Create riders ---
dim r1b@ as BMX_RIDER("", 17, "", 12, 3);
dim r2b@ as BMX_RIDER("", 21, "", 5, 10);
dim r3b@ as BMX_RIDER("", 19, "", 30, 4);

rem Change a few properties after construction
r2b@.SkillLevel$ = "";
r2b@.Wins% = 8;
r2b@.Losses% = 9;

rem --- Create a team (PRO flag available when BMX_TEAM is compiled) ---
dim t3@ as BMX_TEAM("", 2015, PRO);

rem Set some team stats
t3@.TeamWins% = 12;
t3@.TeamLosses% = 3;

rem Add riders to the team
t3@.AddRider(r1b@);
t3@.AddRider(r2b@);
t3@.AddRider(r3b@);

rem --- Show team summary and rider list ---
print "", t3@.Info$();
print "", t3@.WinPct();

let names2$ = t3@.RiderNames$();
print "", LEN(names2$), "";
for i% = 0 to LEN(names2$)-1
  print "", names2$(i%);
next i%

rem Also print descriptions from the riders for variety
let descs2$ = t3@.RiderDescriptions$();
print "";
for i% = 0 to LEN(descs2$)-1
  print "", descs2$(i%);
next i%

rem --- Optionally show full object descriptors ---
let ans$3 = ""; rem keep non-interactive here
if ans$3 == "" then begin
  print "";
  print DESCRIBE$(r1b@);
  print "";
  DESCRIBE t3@;
end

println "";
println "";
println "";

let A1$ = "";
let B1$ = "";
let C1$ = A1$ + B1$;
println C1$; // expected HiThere
println A1$, B1$; // expected Hi	There

println LEN(C1$); // expected 7
println MID$(C1$, 3, 4); // expected Ther
println MID$(C1$, 3); // expected There
println LEFT$(C1$, 2); // expected Hi
println RIGHT$(C1$, 5); // expected There
println INSTR(C1$, ""); // expected 4
println INSTR(C1$, "", 5); // expected 6
println INSTR(C1$, ""); // expected 0

println "";
println "";
println "";

let x = 0;
while x < 3 begin
    print x;
    let x = x + 1;
end

' Infinite loop with BREAK (will break at 3)
let i = 0;
while true begin
    let i = i + 1;
    if i == 3 then begin // Block if
        break;
    end
    print i;
end

' Using CONTINUE (skip 3)
let j = 0;
while j < 5 begin
    let j = j + 1;
    if j == 3 then begin
        continue;
    end
    print j;
end

' Infinite loop with BREAK (will break at 3)
let i = 0;
while true begin
    let i = i + 1;
    if i == 3 then break; // Immediate if
    print i;
end

' Using CONTINUE (skip 3)
let j = 0;
while j < 5 begin
    let j = j + 1;
    if j == 3 then  continue;
    print j;
end


' FALSE as never-enter condition
while false begin
    print "";
end
